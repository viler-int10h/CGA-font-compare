; Visually compare the native text mode charset vs. IBM CGA (VileR 2022)
; Assemble w/FASM

use16
org 100h

;#################################  MACROS  ##################################

macro wait_for_vsync {
local ..x
..x:  in     al, dx
      test   al, 8
      jz     ..x
}
macro wait_for_no_vsync {
local ..x
..x:  in     al, dx
      test   al, 8
      jnz    ..x
}
macro wait_for_d_enable {
local ..x
..x:  in     al, dx
      test   al, 1
      jnz    ..x
}
macro wait_for_d_disable {
local ..x
..x:  in     al, dx
      test   al, 1
      jz     ..x
}

;##############################  CODE BEGINS  ################################

    mov    ah, 0Fh                       ; get video mode
    int    10h
    mov    byte[old_vidmode], al
    
    mov    ax, 2                         ; set 80x25, B&W
    int    10h
    
    mov    ah, 9
    mov    dx, text                      ; Print instructions
    int    21h
    
@@: xor    ax, ax                        ; Get keystroke
    int    16h
    and    al, 11011111b                 ;    lowercase -> uppercase
    cmp    al, 'Y'
    je     @f
    cmp    al, 'N'
    jne    @b
    
    ret

  ; Use BIOS to draw graphical IBM font @ B800:0000-:1400, :2000-:3400

@@: xor    ax, ax
    mov    ds, ax                        ; Target interrupt vector table
    mov    si, 1Fh*4                     ; Save current graphics font ptr
    push   si ;!;
    mov    di, old_int1F
    times  2 movsw
    
    mov    ax, 5                         ; 320x200, B&W
    int    10h
    
    mov    dx, 3d8h                      ; mode select
    mov    al, 000110b                   ; -BLINK -1BPP -VIDEO +BW +GRPH -HRES
    out    dx, al
    
    pop    si ;!;
    push   si ;!;
    cli
    mov    word[si], cga_font            ;    gfx font = IBM CGA (lower)
    mov    word[si+2], cs
    sti
    call   print_hi128
    
    mov    word[si], cga_font + 1024     ;    gfx font = IBM CGA (upper)
    call   print_hi128
    
    pop    di ;!;                        ; Restore original pointer
    push   ds
    pop    es
    push   cs
    pop    ds
    mov    si, old_int1F
    cli
    times  2 movsw
    sti
  
  ; Poke 256 text mode chars into VRAM @ B800:1590
  
    mov    ax, 0B800h
    mov    es, ax
    mov    di, 1590h
    
    mov    ah, 07h                       ; attribute
    mov    cx, 16                        ; row count
r1: mov    bx, 16
@@: stosw
    inc    ax                            ; character
    dec    bx
    jnz    @b
    add    di, (40-16)*2                 ; next row of text
    loop   r1
    
    mov    dx, 3d9h                      ; color select
    mov    al, 100000b                   ; +PAL1 -INTENSE -C0I -C0R -C0G -C0B
    out    dx, al

  ; Start run
  
    in     al, 21h                       ; read current IRQ mask
    mov    byte[old_irqmask], al         ; save it
    or     al, 11111101b                 ; mask off all except keyboard (IRQ1)
    out    21h, al

@@: mov    ah, 1                         ; clear keyboard buffer:
    int    16h                           ;    check for keystroke
    jz     @f
    xor    ax, ax
    int    16h                           ;    remove from buffer
    jmp    short @b                      ;    and check again    
    
@@: mov    dl, 0DAh                      ; STATUS
    wait_for_vsync
    wait_for_d_enable
  
  frame_loop:
    mov    bx, 8
@@: call   gfx_frame                     ; graphics mode - 8 frames
    mov    ah, 1                         ; check for keystroke 
    int    16h
    jnz    bye
    dec    bx
    jnz    @b
    mov    bx, 8
@@: call   txt_frame                     ; text mode - 8 frames
    mov    ah, 1                         ; check for keystroke 
    int    16h
    jnz    bye
    dec    bx
    jnz    @b
    jmp    short frame_loop
    
  ; Terminate
    
bye:
    xor    ax, ax                        ; remove keystroke from buffer
    int    16h

    mov    al, byte[old_irqmask]
    out    21h, al                       ; restore original IRQ mask

    mov    al, byte[old_vidmode]         ; ...and original video mode
    xor    ah, ah
    int    10h
    
    ret


;###############################  SUBROUTINES  ###############################


print_hi128:

    mov    al, 80h                       ; Character
    mov    cx, 8                         ; Row count
    mov    bx, 3                         ; color
  .row:
    mov    dx, 16                        ; Chars/row
@@: mov    ah, 0Eh                       ; TTY output
    int    10h
    inc    ax
    dec    dx
    jnz    @b
    push   ax ;!;
    mov    ax, 0E0dh                     ; CR/LF
    int    10h
    mov    ax, 0E0ah
    int    10h
    pop    ax ;!;
    loop   .row
    ret
    
    
gfx_frame:  ; start during active raster time, second invisible section

    mov    dl, 0D4h                      ; CRTC
    mov    ax, 03C0Ch                    ; - S Addr HIGH  (0C) = 3Ch
    out    dx, ax
    mov    ax, 0D40Dh                    ; - S Addr LOW   (0D) = D4h
    out    dx, ax
    mov    dl, 0DAh                      ; STATUS
    
    wait_for_vsync                       ;        (4000h - 20*40 - 12 = 3cd4h)
    
    mov    dl, 0D8h                      ; mode select
    mov    al, 000110b                   ; -BLINK -1BPP -VIDEO +BW +GRPH -HRES
    out    dx, al
    mov    dl, 0DAh                      ; STATUS

    wait_for_d_enable                    ; active raster starts here
    mov    dl, 0D4h                      ; CRTC
    mov    ax, 0109h                     ; - Max Scanline (09) = 01h
    out    dx, ax
    mov    ax, 6406h                     ; - V Displayed  (06) = 64h
    out    dx, ax    
    mov    ax, 7007h                     ; - V Sync Pos   (07) = 70h
    out    dx, ax
    mov    ax, 7f04h                     ; - V Total      (04) = 7Fh
    out    dx, ax
    mov    dl, 0DAh                      ; STATUS

    mov    cl, 39
@@: wait_for_d_disable
    wait_for_d_enable
    loop   @b                            ; scanline 39 - go visible:
    mov    dl, 0D8h                      ; mode select
    mov    al, 001110b                   ; -BLINK -1BPP +VIDEO +BW +GRPH -HRES
    out    dx, al
    mov    dl, 0DAh                      ; STATUS
    mov    cl, 129
@@: wait_for_d_disable
    wait_for_d_enable                    ; 
    loop   @b                            ; scanline 168 - go invisible:
    mov    dl, 0D8h                      ; mode select
    mov    al, 000110b                   ; -BLINK -1BPP -VIDEO +BW +GRPH -HRES
    out    dx, al
    
    ret    
    
    
txt_frame:  ; start during active raster time, second invisible section

    mov    dl, 0D4h                      ; CRTC
    mov    ax, 0090Ch                    ; - S Addr HIGH  (0C) = 09h
    out    dx, ax                                                   
    mov    ax, 0F40Dh                    ; - S Addr LOW   (0D) = F4h
    out    dx, ax
    mov    dl, 0DAh                      ; STATUS
    
    wait_for_vsync                       ;     (1590h/2 - 5*40 - 12 = 9F4h)
    
    mov    dl, 0D8h                      ; mode select
    mov    al, 000100b                   ; -BLINK -1BPP -VIDEO +BW -GRPH -HRES
    out    dx, al
    mov    dl, 0DAh                      ; STATUS

    wait_for_d_enable                    ; active raster starts here
    mov    dl, 0D4h                      ; CRTC
    mov    ax, 0709h                     ; - Max Scanline (09) = 07h
    out    dx, ax                                                   
    mov    ax, 1906h                     ; - V Displayed  (06) = 19h
    out    dx, ax                                                   
    mov    ax, 1C07h                     ; - V Sync Pos   (07) = 1Ch
    out    dx, ax                                                   
    mov    ax, 1f04h                     ; - V Total      (04) = 1Fh
    out    dx, ax
    mov    dl, 0DAh                      ; STATUS

    mov    cl, 39
@@: wait_for_d_disable
    wait_for_d_enable                    ; active raster starts here
    loop   @b                            ; scanline 39 - go visible:
    mov    dl, 0D8h                      ; mode select
    mov    al, 001100b                   ; -BLINK -1BPP +VIDEO +BW -GRPH -HRES
    out    dx, al
    mov    dl, 0DAh                      ; STATUS
    mov    cl, 129
@@: wait_for_d_disable
    wait_for_d_enable                    ; 
    loop   @b                            ; scanline 168 - go invisible:
    mov    dl, 0D8h                      ; mode select
    mov    al, 000100b                   ; -BLINK -1BPP -VIDEO +BW -GRPH -HRES
    out    dx, al
    
    ret    

;##################################  DATA  ###################################

text:

    db 'CGA ROM FONT COMPARISON TOOL',13,10,13,10

    db "Tests your adapter's 8x8 ROM font vs. the original IBM CGA font:",13,10,13,10
  
    db "- The screen will quickly alternate between (1) your hardware's ROM character",13,10
    db "  set (in text mode), and (2) a graphical display of IBM's default ('thick')",13,10
    db "  CGA ROM font.",13,10,13,10

    db "- Non-matching characters will appear to flash and animate.  If the image is",13,10
    db "  100% steady, your 8x8 ROM font is identical to IBM's.",13,10,13,10

    db "NOTE:  To run this test correctly, your hardware must be register-compatible",13,10
    db "with CGA.  To determine that, you can use Trixter's CGA Compatibility Tester",13,10
    db '(http://www.oldskool.org/pc/cgacomp).',13,10,13,10

    db 'Any key will end the test.  Go ahead? (Y/N)$'

align 2
cga_font:

    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x81,0xA5,0x81,0xBD,0x99,0x81,0x7E,0x7E,0xFF,0xDB,0xFF,0xC3,0xE7,0xFF,0x7E,0x6C,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00
    db 0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00,0x38,0x7C,0x38,0xFE,0xFE,0xD6,0x10,0x38,0x10,0x10,0x38,0x7C,0xFE,0x7C,0x10,0x38,0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00
    db 0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF,0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00,0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF,0x0F,0x07,0x0F,0x7D,0xCC,0xCC,0xCC,0x78
    db 0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18,0x3F,0x33,0x3F,0x30,0x30,0x70,0xF0,0xE0,0x7F,0x63,0x7F,0x63,0x63,0x67,0xE6,0xC0,0x18,0xDB,0x3C,0xE7,0xE7,0x3C,0xDB,0x18
    db 0x80,0xE0,0xF8,0xFE,0xF8,0xE0,0x80,0x00,0x02,0x0E,0x3E,0xFE,0x3E,0x0E,0x02,0x00,0x18,0x3C,0x7E,0x18,0x18,0x7E,0x3C,0x18,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x00
    db 0x7F,0xDB,0xDB,0x7B,0x1B,0x1B,0x1B,0x00,0x3E,0x63,0x38,0x6C,0x6C,0x38,0xCC,0x78,0x00,0x00,0x00,0x00,0x7E,0x7E,0x7E,0x00,0x18,0x3C,0x7E,0x18,0x7E,0x3C,0x18,0xFF
    db 0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00,0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00
    db 0x00,0x00,0xC0,0xC0,0xC0,0xFE,0x00,0x00,0x00,0x24,0x66,0xFF,0x66,0x24,0x00,0x00,0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x00,0x00,0x00,0xFF,0xFF,0x7E,0x3C,0x18,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x78,0x78,0x30,0x30,0x00,0x30,0x00,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00
    db 0x30,0x7C,0xC0,0x78,0x0C,0xF8,0x30,0x00,0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00,0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00,0x60,0x60,0xC0,0x00,0x00,0x00,0x00,0x00
    db 0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x00,0x60,0x30,0x18,0x18,0x18,0x30,0x60,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x30,0x30,0xFC,0x30,0x30,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x60,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00
    db 0x7C,0xC6,0xCE,0xDE,0xF6,0xE6,0x7C,0x00,0x30,0x70,0x30,0x30,0x30,0x30,0xFC,0x00,0x78,0xCC,0x0C,0x38,0x60,0xCC,0xFC,0x00,0x78,0xCC,0x0C,0x38,0x0C,0xCC,0x78,0x00
    db 0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x1E,0x00,0xFC,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00,0x38,0x60,0xC0,0xF8,0xCC,0xCC,0x78,0x00,0xFC,0xCC,0x0C,0x18,0x30,0x30,0x30,0x00
    db 0x78,0xCC,0xCC,0x78,0xCC,0xCC,0x78,0x00,0x78,0xCC,0xCC,0x7C,0x0C,0x18,0x70,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x00,0x00,0x30,0x30,0x60
    db 0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x00,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,0x60,0x30,0x18,0x0C,0x18,0x30,0x60,0x00,0x78,0xCC,0x0C,0x18,0x30,0x00,0x30,0x00
    db 0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x78,0x00,0x30,0x78,0xCC,0xCC,0xFC,0xCC,0xCC,0x00,0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC,0x00,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C,0x00
    db 0xF8,0x6C,0x66,0x66,0x66,0x6C,0xF8,0x00,0xFE,0x62,0x68,0x78,0x68,0x62,0xFE,0x00,0xFE,0x62,0x68,0x78,0x68,0x60,0xF0,0x00,0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3E,0x00
    db 0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00,0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00
    db 0xF0,0x60,0x60,0x60,0x62,0x66,0xFE,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00,0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00
    db 0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,0x78,0xCC,0xCC,0xCC,0xDC,0x78,0x1C,0x00,0xFC,0x66,0x66,0x7C,0x6C,0x66,0xE6,0x00,0x78,0xCC,0x60,0x30,0x18,0xCC,0x78,0x00
    db 0xFC,0xB4,0x30,0x30,0x30,0x30,0x78,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xFC,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00
    db 0xC6,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x30,0x78,0x00,0xFE,0xC6,0x8C,0x18,0x32,0x66,0xFE,0x00,0x78,0x60,0x60,0x60,0x60,0x60,0x78,0x00
    db 0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00,0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF
    db 0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,0xDC,0x00,0x00,0x00,0x78,0xCC,0xC0,0xCC,0x78,0x00
    db 0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0x76,0x00,0x00,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00,0x38,0x6C,0x60,0xF0,0x60,0x60,0xF0,0x00,0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0xF8
    db 0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6,0x00,0x30,0x00,0x70,0x30,0x30,0x30,0x78,0x00,0x0C,0x00,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6,0x00
    db 0x70,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,0x00,0xCC,0xFE,0xFE,0xD6,0xC6,0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0x78,0x00
    db 0x00,0x00,0xDC,0x66,0x66,0x7C,0x60,0xF0,0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0x1E,0x00,0x00,0xDC,0x76,0x66,0x60,0xF0,0x00,0x00,0x00,0x7C,0xC0,0x78,0x0C,0xF8,0x00
    db 0x10,0x30,0x7C,0x30,0x30,0x34,0x18,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x00,0x00,0x00,0xC6,0xD6,0xFE,0xFE,0x6C,0x00
    db 0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00,0x00,0x00,0xCC,0xCC,0xCC,0x7C,0x0C,0xF8,0x00,0x00,0xFC,0x98,0x30,0x64,0xFC,0x00,0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C,0x00
    db 0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00,0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00
    db 0x78,0xCC,0xC0,0xCC,0x78,0x18,0x0C,0x78,0x00,0xCC,0x00,0xCC,0xCC,0xCC,0x7E,0x00,0x1C,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00,0x7E,0xC3,0x3C,0x06,0x3E,0x66,0x3F,0x00
    db 0xCC,0x00,0x78,0x0C,0x7C,0xCC,0x7E,0x00,0xE0,0x00,0x78,0x0C,0x7C,0xCC,0x7E,0x00,0x30,0x30,0x78,0x0C,0x7C,0xCC,0x7E,0x00,0x00,0x00,0x78,0xC0,0xC0,0x78,0x0C,0x38
    db 0x7E,0xC3,0x3C,0x66,0x7E,0x60,0x3C,0x00,0xCC,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00,0xE0,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00,0xCC,0x00,0x70,0x30,0x30,0x30,0x78,0x00
    db 0x7C,0xC6,0x38,0x18,0x18,0x18,0x3C,0x00,0xE0,0x00,0x70,0x30,0x30,0x30,0x78,0x00,0xC6,0x38,0x6C,0xC6,0xFE,0xC6,0xC6,0x00,0x30,0x30,0x00,0x78,0xCC,0xFC,0xCC,0x00
    db 0x1C,0x00,0xFC,0x60,0x78,0x60,0xFC,0x00,0x00,0x00,0x7F,0x0C,0x7F,0xCC,0x7F,0x00,0x3E,0x6C,0xCC,0xFE,0xCC,0xCC,0xCE,0x00,0x78,0xCC,0x00,0x78,0xCC,0xCC,0x78,0x00
    db 0x00,0xCC,0x00,0x78,0xCC,0xCC,0x78,0x00,0x00,0xE0,0x00,0x78,0xCC,0xCC,0x78,0x00,0x78,0xCC,0x00,0xCC,0xCC,0xCC,0x7E,0x00,0x00,0xE0,0x00,0xCC,0xCC,0xCC,0x7E,0x00
    db 0x00,0xCC,0x00,0xCC,0xCC,0x7C,0x0C,0xF8,0xC3,0x18,0x3C,0x66,0x66,0x3C,0x18,0x00,0xCC,0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x18,0x18,0x7E,0xC0,0xC0,0x7E,0x18,0x18
    db 0x38,0x6C,0x64,0xF0,0x60,0xE6,0xFC,0x00,0xCC,0xCC,0x78,0xFC,0x30,0xFC,0x30,0x30,0xF8,0xCC,0xCC,0xFA,0xC6,0xCF,0xC6,0xC7,0x0E,0x1B,0x18,0x3C,0x18,0x18,0xD8,0x70
    db 0x1C,0x00,0x78,0x0C,0x7C,0xCC,0x7E,0x00,0x38,0x00,0x70,0x30,0x30,0x30,0x78,0x00,0x00,0x1C,0x00,0x78,0xCC,0xCC,0x78,0x00,0x00,0x1C,0x00,0xCC,0xCC,0xCC,0x7E,0x00
    db 0x00,0xF8,0x00,0xF8,0xCC,0xCC,0xCC,0x00,0xFC,0x00,0xCC,0xEC,0xFC,0xDC,0xCC,0x00,0x3C,0x6C,0x6C,0x3E,0x00,0x7E,0x00,0x00,0x38,0x6C,0x6C,0x38,0x00,0x7C,0x00,0x00
    db 0x30,0x00,0x30,0x60,0xC0,0xCC,0x78,0x00,0x00,0x00,0x00,0xFC,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0xFC,0x0C,0x0C,0x00,0x00,0xC3,0xC6,0xCC,0xDE,0x33,0x66,0xCC,0x0F
    db 0xC3,0xC6,0xCC,0xDB,0x37,0x6F,0xCF,0x03,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,0x00,0x33,0x66,0xCC,0x66,0x33,0x00,0x00,0x00,0xCC,0x66,0x33,0x66,0xCC,0x00,0x00
    db 0x22,0x88,0x22,0x88,0x22,0x88,0x22,0x88,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0xDB,0x77,0xDB,0xEE,0xDB,0x77,0xDB,0xEE,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
    db 0x18,0x18,0x18,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,0x18,0x18,0x18,0x36,0x36,0x36,0x36,0xF6,0x36,0x36,0x36,0x00,0x00,0x00,0x00,0xFE,0x36,0x36,0x36
    db 0x00,0x00,0xF8,0x18,0xF8,0x18,0x18,0x18,0x36,0x36,0xF6,0x06,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x00,0x00,0xFE,0x06,0xF6,0x36,0x36,0x36
    db 0x36,0x36,0xF6,0x06,0xFE,0x00,0x00,0x00,0x36,0x36,0x36,0x36,0xFE,0x00,0x00,0x00,0x18,0x18,0xF8,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0x18,0x18
    db 0x18,0x18,0x18,0x18,0x1F,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x18,0x18
    db 0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,0x18,0x18,0x18,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36
    db 0x36,0x36,0x37,0x30,0x3F,0x00,0x00,0x00,0x00,0x00,0x3F,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xF7,0x36,0x36,0x36
    db 0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x36,0x36,0xF7,0x00,0xF7,0x36,0x36,0x36,0x18,0x18,0xFF,0x00,0xFF,0x00,0x00,0x00
    db 0x36,0x36,0x36,0x36,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0xFF,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3F,0x00,0x00,0x00
    db 0x18,0x18,0x1F,0x18,0x1F,0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x1F,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x3F,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,0x36,0x36,0x36
    db 0x18,0x18,0xFF,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x18,0x18,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    db 0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00
    db 0x00,0x00,0x76,0xDC,0xC8,0xDC,0x76,0x00,0x00,0x78,0xCC,0xF8,0xCC,0xF8,0xC0,0xC0,0x00,0xFC,0xCC,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0xFE,0x6C,0x6C,0x6C,0x6C,0x6C,0x00
    db 0xFC,0xCC,0x60,0x30,0x60,0xCC,0xFC,0x00,0x00,0x00,0x7E,0xD8,0xD8,0xD8,0x70,0x00,0x00,0x66,0x66,0x66,0x66,0x7C,0x60,0xC0,0x00,0x76,0xDC,0x18,0x18,0x18,0x18,0x00
    db 0xFC,0x30,0x78,0xCC,0xCC,0x78,0x30,0xFC,0x38,0x6C,0xC6,0xFE,0xC6,0x6C,0x38,0x00,0x38,0x6C,0xC6,0xC6,0x6C,0x6C,0xEE,0x00,0x1C,0x30,0x18,0x7C,0xCC,0xCC,0x78,0x00
    db 0x00,0x00,0x7E,0xDB,0xDB,0x7E,0x00,0x00,0x06,0x0C,0x7E,0xDB,0xDB,0x7E,0x60,0xC0,0x38,0x60,0xC0,0xF8,0xC0,0x60,0x38,0x00,0x78,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x00
    db 0x00,0xFC,0x00,0xFC,0x00,0xFC,0x00,0x00,0x30,0x30,0xFC,0x30,0x30,0x00,0xFC,0x00,0x60,0x30,0x18,0x30,0x60,0x00,0xFC,0x00,0x18,0x30,0x60,0x30,0x18,0x00,0xFC,0x00
    db 0x0E,0x1B,0x1B,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xD8,0xD8,0x70,0x30,0x30,0x00,0xFC,0x00,0x30,0x30,0x00,0x00,0x76,0xDC,0x00,0x76,0xDC,0x00,0x00
    db 0x38,0x6C,0x6C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0F,0x0C,0x0C,0x0C,0xEC,0x6C,0x3C,0x1C
    db 0x78,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x70,0x18,0x30,0x60,0x78,0x00,0x00,0x00,0x00,0x00,0x3C,0x3C,0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00


old_int1F:    times 2 dw ?
old_irqmask:  db ?
old_vidmode:  db ?
